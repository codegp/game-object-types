// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package types

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

// Attributes:
//  - ID
//  - Name
//  - CanBeOccupied
//  - MoveDelayFactor
//  - DamagePenalty
type TerrainType struct {
	ID              int64   `thrift:"ID,1,required" datastore:"-"`
	Name            string  `thrift:"name,2,required" datastore:",noindex" json:"name"`
	CanBeOccupied   bool    `thrift:"canBeOccupied,3,required" datastore:",noindex" json:"canBeOccupied"`
	MoveDelayFactor float64 `thrift:"moveDelayFactor,4,required" datastore:",noindex" json:"moveDelayFactor"`
	DamagePenalty   float64 `thrift:"damagePenalty,5,required" datastore:",noindex" json:"damagePenalty"`
}

func NewTerrainType() *TerrainType {
	return &TerrainType{}
}

func (p *TerrainType) GetID() int64 {
	return p.ID
}

func (p *TerrainType) GetName() string {
	return p.Name
}

func (p *TerrainType) GetCanBeOccupied() bool {
	return p.CanBeOccupied
}

func (p *TerrainType) GetMoveDelayFactor() float64 {
	return p.MoveDelayFactor
}

func (p *TerrainType) GetDamagePenalty() float64 {
	return p.DamagePenalty
}
func (p *TerrainType) read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetID bool = false
	var issetName bool = false
	var issetCanBeOccupied bool = false
	var issetMoveDelayFactor bool = false
	var issetDamagePenalty bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetID = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetName = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetCanBeOccupied = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
			issetMoveDelayFactor = true
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
			issetDamagePenalty = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"))
	}
	if !issetName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Name is not set"))
	}
	if !issetCanBeOccupied {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CanBeOccupied is not set"))
	}
	if !issetMoveDelayFactor {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MoveDelayFactor is not set"))
	}
	if !issetDamagePenalty {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DamagePenalty is not set"))
	}
	return nil
}

func (p *TerrainType) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *TerrainType) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *TerrainType) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.CanBeOccupied = v
	}
	return nil
}

func (p *TerrainType) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.MoveDelayFactor = v
	}
	return nil
}

func (p *TerrainType) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.DamagePenalty = v
	}
	return nil
}

func (p *TerrainType) write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TerrainType"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TerrainType) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ID: ", p), err)
	}
	return err
}

func (p *TerrainType) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err)
	}
	return err
}

func (p *TerrainType) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("canBeOccupied", thrift.BOOL, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:canBeOccupied: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.CanBeOccupied)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.canBeOccupied (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:canBeOccupied: ", p), err)
	}
	return err
}

func (p *TerrainType) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("moveDelayFactor", thrift.DOUBLE, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:moveDelayFactor: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.MoveDelayFactor)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.moveDelayFactor (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:moveDelayFactor: ", p), err)
	}
	return err
}

func (p *TerrainType) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("damagePenalty", thrift.DOUBLE, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:damagePenalty: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.DamagePenalty)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.damagePenalty (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:damagePenalty: ", p), err)
	}
	return err
}

func (p *TerrainType) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TerrainType(%+v)", *p)
}

// Attributes:
//  - ID
//  - Name
//  - Damage
//  - Delay
//  - Range
//  - Accuracy
//  - AttackDelayDealt
//  - MoveDelayDealt
type AttackType struct {
	ID               int64   `thrift:"ID,1,required" datastore:"-"`
	Name             string  `thrift:"name,2,required" datastore:",noindex" json: "name"`
	Damage           float64 `thrift:"damage,3,required" datastore:",noindex" json: "damage"`
	Delay            float64 `thrift:"delay,4,required" datastore:",noindex" json: "delay"`
	Range            float64 `thrift:"range,5,required" datastore:",noindex" json: "range"`
	Accuracy         float64 `thrift:"accuracy,6,required" datastore:",noindex" json: "accuracy"`
	AttackDelayDealt float64 `thrift:"attackDelayDealt,7,required" datastore:",noindex" json: "attackDelayDealt"`
	MoveDelayDealt   float64 `thrift:"moveDelayDealt,8,required" datastore:",noindex" json: "moveDelayDealt"`
}

func NewAttackType() *AttackType {
	return &AttackType{}
}

func (p *AttackType) GetID() int64 {
	return p.ID
}

func (p *AttackType) GetName() string {
	return p.Name
}

func (p *AttackType) GetDamage() float64 {
	return p.Damage
}

func (p *AttackType) GetDelay() float64 {
	return p.Delay
}

func (p *AttackType) GetRange() float64 {
	return p.Range
}

func (p *AttackType) GetAccuracy() float64 {
	return p.Accuracy
}

func (p *AttackType) GetAttackDelayDealt() float64 {
	return p.AttackDelayDealt
}

func (p *AttackType) GetMoveDelayDealt() float64 {
	return p.MoveDelayDealt
}
func (p *AttackType) read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetID bool = false
	var issetName bool = false
	var issetDamage bool = false
	var issetDelay bool = false
	var issetRange bool = false
	var issetAccuracy bool = false
	var issetAttackDelayDealt bool = false
	var issetMoveDelayDealt bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetID = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetName = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetDamage = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
			issetDelay = true
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
			issetRange = true
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
			issetAccuracy = true
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
			issetAttackDelayDealt = true
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
			issetMoveDelayDealt = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"))
	}
	if !issetName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Name is not set"))
	}
	if !issetDamage {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Damage is not set"))
	}
	if !issetDelay {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Delay is not set"))
	}
	if !issetRange {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Range is not set"))
	}
	if !issetAccuracy {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Accuracy is not set"))
	}
	if !issetAttackDelayDealt {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AttackDelayDealt is not set"))
	}
	if !issetMoveDelayDealt {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MoveDelayDealt is not set"))
	}
	return nil
}

func (p *AttackType) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *AttackType) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *AttackType) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Damage = v
	}
	return nil
}

func (p *AttackType) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Delay = v
	}
	return nil
}

func (p *AttackType) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Range = v
	}
	return nil
}

func (p *AttackType) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Accuracy = v
	}
	return nil
}

func (p *AttackType) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.AttackDelayDealt = v
	}
	return nil
}

func (p *AttackType) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.MoveDelayDealt = v
	}
	return nil
}

func (p *AttackType) write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AttackType"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AttackType) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ID: ", p), err)
	}
	return err
}

func (p *AttackType) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err)
	}
	return err
}

func (p *AttackType) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("damage", thrift.DOUBLE, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:damage: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.Damage)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.damage (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:damage: ", p), err)
	}
	return err
}

func (p *AttackType) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("delay", thrift.DOUBLE, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:delay: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.Delay)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.delay (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:delay: ", p), err)
	}
	return err
}

func (p *AttackType) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("range", thrift.DOUBLE, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:range: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.Range)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.range (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:range: ", p), err)
	}
	return err
}

func (p *AttackType) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("accuracy", thrift.DOUBLE, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:accuracy: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.Accuracy)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.accuracy (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:accuracy: ", p), err)
	}
	return err
}

func (p *AttackType) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("attackDelayDealt", thrift.DOUBLE, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:attackDelayDealt: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.AttackDelayDealt)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.attackDelayDealt (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:attackDelayDealt: ", p), err)
	}
	return err
}

func (p *AttackType) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("moveDelayDealt", thrift.DOUBLE, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:moveDelayDealt: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.MoveDelayDealt)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.moveDelayDealt (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:moveDelayDealt: ", p), err)
	}
	return err
}

func (p *AttackType) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AttackType(%+v)", *p)
}

// Attributes:
//  - ID
//  - Name
//  - Delay
//  - TakesDelayFromTerrain
type MoveType struct {
	ID                    int64   `thrift:"ID,1,required" datastore:"-"`
	Name                  string  `thrift:"name,2,required" datastore:",noindex" json:"name"`
	Delay                 float64 `thrift:"delay,3,required" datastore:",noindex" json:"delay"`
	TakesDelayFromTerrain bool    `thrift:"takesDelayFromTerrain,4,required" datastore:",noindex" json:"takesDelayFromTerrain"`
}

func NewMoveType() *MoveType {
	return &MoveType{}
}

func (p *MoveType) GetID() int64 {
	return p.ID
}

func (p *MoveType) GetName() string {
	return p.Name
}

func (p *MoveType) GetDelay() float64 {
	return p.Delay
}

func (p *MoveType) GetTakesDelayFromTerrain() bool {
	return p.TakesDelayFromTerrain
}
func (p *MoveType) read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetID bool = false
	var issetName bool = false
	var issetDelay bool = false
	var issetTakesDelayFromTerrain bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetID = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetName = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetDelay = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
			issetTakesDelayFromTerrain = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"))
	}
	if !issetName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Name is not set"))
	}
	if !issetDelay {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Delay is not set"))
	}
	if !issetTakesDelayFromTerrain {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TakesDelayFromTerrain is not set"))
	}
	return nil
}

func (p *MoveType) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *MoveType) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *MoveType) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Delay = v
	}
	return nil
}

func (p *MoveType) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.TakesDelayFromTerrain = v
	}
	return nil
}

func (p *MoveType) write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MoveType"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MoveType) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ID: ", p), err)
	}
	return err
}

func (p *MoveType) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err)
	}
	return err
}

func (p *MoveType) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("delay", thrift.DOUBLE, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:delay: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.Delay)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.delay (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:delay: ", p), err)
	}
	return err
}

func (p *MoveType) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("takesDelayFromTerrain", thrift.BOOL, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:takesDelayFromTerrain: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.TakesDelayFromTerrain)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.takesDelayFromTerrain (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:takesDelayFromTerrain: ", p), err)
	}
	return err
}

func (p *MoveType) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MoveType(%+v)", *p)
}

// Attributes:
//  - ID
//  - Name
//  - MoveDelayFactor
//  - DamageFactor
//  - AttackDelayFactor
//  - RangeFactor
//  - AccuracyFactor
//  - SpawnDelayFactor
type ItemType struct {
	ID                int64   `thrift:"ID,1,required" datastore:"-"`
	Name              string  `thrift:"name,2,required" datastore:",noindex" json:"name"`
	MoveDelayFactor   float64 `thrift:"moveDelayFactor,3,required" datastore:",noindex" json:"moveDelayFactor"`
	DamageFactor      float64 `thrift:"damageFactor,4,required" datastore:",noindex" json:"damageFactor"`
	AttackDelayFactor float64 `thrift:"attackDelayFactor,5,required" datastore:",noindex" json:"attackDelayFactor"`
	RangeFactor       float64 `thrift:"rangeFactor,6,required" datastore:",noindex" json:"rangeFactor"`
	AccuracyFactor    float64 `thrift:"accuracyFactor,7,required" datastore:",noindex" json:"accuracyFactor"`
	SpawnDelayFactor  float64 `thrift:"spawnDelayFactor,8,required" datastore:",noindex" json:"spawnDelayFactor"`
}

func NewItemType() *ItemType {
	return &ItemType{}
}

func (p *ItemType) GetID() int64 {
	return p.ID
}

func (p *ItemType) GetName() string {
	return p.Name
}

func (p *ItemType) GetMoveDelayFactor() float64 {
	return p.MoveDelayFactor
}

func (p *ItemType) GetDamageFactor() float64 {
	return p.DamageFactor
}

func (p *ItemType) GetAttackDelayFactor() float64 {
	return p.AttackDelayFactor
}

func (p *ItemType) GetRangeFactor() float64 {
	return p.RangeFactor
}

func (p *ItemType) GetAccuracyFactor() float64 {
	return p.AccuracyFactor
}

func (p *ItemType) GetSpawnDelayFactor() float64 {
	return p.SpawnDelayFactor
}
func (p *ItemType) read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetID bool = false
	var issetName bool = false
	var issetMoveDelayFactor bool = false
	var issetDamageFactor bool = false
	var issetAttackDelayFactor bool = false
	var issetRangeFactor bool = false
	var issetAccuracyFactor bool = false
	var issetSpawnDelayFactor bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetID = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetName = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetMoveDelayFactor = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
			issetDamageFactor = true
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
			issetAttackDelayFactor = true
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
			issetRangeFactor = true
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
			issetAccuracyFactor = true
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
			issetSpawnDelayFactor = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"))
	}
	if !issetName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Name is not set"))
	}
	if !issetMoveDelayFactor {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MoveDelayFactor is not set"))
	}
	if !issetDamageFactor {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DamageFactor is not set"))
	}
	if !issetAttackDelayFactor {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AttackDelayFactor is not set"))
	}
	if !issetRangeFactor {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RangeFactor is not set"))
	}
	if !issetAccuracyFactor {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AccuracyFactor is not set"))
	}
	if !issetSpawnDelayFactor {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SpawnDelayFactor is not set"))
	}
	return nil
}

func (p *ItemType) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *ItemType) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *ItemType) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.MoveDelayFactor = v
	}
	return nil
}

func (p *ItemType) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.DamageFactor = v
	}
	return nil
}

func (p *ItemType) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.AttackDelayFactor = v
	}
	return nil
}

func (p *ItemType) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.RangeFactor = v
	}
	return nil
}

func (p *ItemType) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.AccuracyFactor = v
	}
	return nil
}

func (p *ItemType) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.SpawnDelayFactor = v
	}
	return nil
}

func (p *ItemType) write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ItemType"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ItemType) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ID: ", p), err)
	}
	return err
}

func (p *ItemType) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err)
	}
	return err
}

func (p *ItemType) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("moveDelayFactor", thrift.DOUBLE, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:moveDelayFactor: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.MoveDelayFactor)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.moveDelayFactor (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:moveDelayFactor: ", p), err)
	}
	return err
}

func (p *ItemType) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("damageFactor", thrift.DOUBLE, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:damageFactor: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.DamageFactor)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.damageFactor (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:damageFactor: ", p), err)
	}
	return err
}

func (p *ItemType) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("attackDelayFactor", thrift.DOUBLE, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:attackDelayFactor: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.AttackDelayFactor)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.attackDelayFactor (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:attackDelayFactor: ", p), err)
	}
	return err
}

func (p *ItemType) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rangeFactor", thrift.DOUBLE, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:rangeFactor: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.RangeFactor)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.rangeFactor (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:rangeFactor: ", p), err)
	}
	return err
}

func (p *ItemType) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("accuracyFactor", thrift.DOUBLE, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:accuracyFactor: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.AccuracyFactor)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.accuracyFactor (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:accuracyFactor: ", p), err)
	}
	return err
}

func (p *ItemType) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("spawnDelayFactor", thrift.DOUBLE, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:spawnDelayFactor: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.SpawnDelayFactor)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.spawnDelayFactor (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:spawnDelayFactor: ", p), err)
	}
	return err
}

func (p *ItemType) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ItemType(%+v)", *p)
}

// Attributes:
//  - ID
//  - Name
//  - AttackTypeIDs
//  - MoveTypeIDs
//  - CanSpawn
//  - CanBeSpawned
//  - SpawnDelay
//  - MaxHealth
//  - CanHeal
//  - MoveDelayFactor
//  - DamageFactor
//  - AttackDelayFactor
//  - RangeFactor
//  - AccuracyFactor
//  - SpawnDelayFactor
type BotType struct {
	ID                int64   `thrift:"ID,1,required" datastore:"-"`
	Name              string  `thrift:"name,2,required" datastore:",noindex" json:"name"`
	AttackTypeIDs     []int64 `thrift:"attackTypeIDs,3,required" datastore:",noindex" json:"attackTypeIDs"`
	MoveTypeIDs       []int64 `thrift:"moveTypeIDs,4,required" datastore:",noindex" json:"moveTypeIDs"`
	CanSpawn          bool    `thrift:"canSpawn,5,required" datastore:",noindex" json:"canSpawn"`
	CanBeSpawned      bool    `thrift:"canBeSpawned,6,required" datastore:",noindex" json:"canBeSpawned"`
	SpawnDelay        float64 `thrift:"spawnDelay,7,required" datastore:",noindex" json:"spawnDelay"`
	MaxHealth         float64 `thrift:"maxHealth,8,required" datastore:",noindex" json:"maxHealth"`
	CanHeal           bool    `thrift:"canHeal,9,required" datastore:",noindex" json:"canHeal"`
	MoveDelayFactor   float64 `thrift:"moveDelayFactor,10,required" datastore:",noindex" json:"moveDelayFactor"`
	DamageFactor      float64 `thrift:"damageFactor,11,required" datastore:",noindex" json:"damageFactor"`
	AttackDelayFactor float64 `thrift:"attackDelayFactor,12,required" datastore:",noindex" json:"attackDelayFactor"`
	RangeFactor       float64 `thrift:"rangeFactor,13,required" datastore:",noindex" json:"rangeFactor"`
	AccuracyFactor    float64 `thrift:"accuracyFactor,14,required" datastore:",noindex" json:"accuracyFactor"`
	SpawnDelayFactor  float64 `thrift:"spawnDelayFactor,15,required" datastore:",noindex" json:"spawnDelayFactor"`
}

func NewBotType() *BotType {
	return &BotType{}
}

func (p *BotType) GetID() int64 {
	return p.ID
}

func (p *BotType) GetName() string {
	return p.Name
}

func (p *BotType) GetAttackTypeIDs() []int64 {
	return p.AttackTypeIDs
}

func (p *BotType) GetMoveTypeIDs() []int64 {
	return p.MoveTypeIDs
}

func (p *BotType) GetCanSpawn() bool {
	return p.CanSpawn
}

func (p *BotType) GetCanBeSpawned() bool {
	return p.CanBeSpawned
}

func (p *BotType) GetSpawnDelay() float64 {
	return p.SpawnDelay
}

func (p *BotType) GetMaxHealth() float64 {
	return p.MaxHealth
}

func (p *BotType) GetCanHeal() bool {
	return p.CanHeal
}

func (p *BotType) GetMoveDelayFactor() float64 {
	return p.MoveDelayFactor
}

func (p *BotType) GetDamageFactor() float64 {
	return p.DamageFactor
}

func (p *BotType) GetAttackDelayFactor() float64 {
	return p.AttackDelayFactor
}

func (p *BotType) GetRangeFactor() float64 {
	return p.RangeFactor
}

func (p *BotType) GetAccuracyFactor() float64 {
	return p.AccuracyFactor
}

func (p *BotType) GetSpawnDelayFactor() float64 {
	return p.SpawnDelayFactor
}
func (p *BotType) read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetID bool = false
	var issetName bool = false
	var issetAttackTypeIDs bool = false
	var issetMoveTypeIDs bool = false
	var issetCanSpawn bool = false
	var issetCanBeSpawned bool = false
	var issetSpawnDelay bool = false
	var issetMaxHealth bool = false
	var issetCanHeal bool = false
	var issetMoveDelayFactor bool = false
	var issetDamageFactor bool = false
	var issetAttackDelayFactor bool = false
	var issetRangeFactor bool = false
	var issetAccuracyFactor bool = false
	var issetSpawnDelayFactor bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetID = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetName = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetAttackTypeIDs = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
			issetMoveTypeIDs = true
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
			issetCanSpawn = true
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
			issetCanBeSpawned = true
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
			issetSpawnDelay = true
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
			issetMaxHealth = true
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
			issetCanHeal = true
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
			issetMoveDelayFactor = true
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
			issetDamageFactor = true
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
			issetAttackDelayFactor = true
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
			issetRangeFactor = true
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
			issetAccuracyFactor = true
		case 15:
			if err := p.readField15(iprot); err != nil {
				return err
			}
			issetSpawnDelayFactor = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"))
	}
	if !issetName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Name is not set"))
	}
	if !issetAttackTypeIDs {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AttackTypeIDs is not set"))
	}
	if !issetMoveTypeIDs {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MoveTypeIDs is not set"))
	}
	if !issetCanSpawn {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CanSpawn is not set"))
	}
	if !issetCanBeSpawned {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CanBeSpawned is not set"))
	}
	if !issetSpawnDelay {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SpawnDelay is not set"))
	}
	if !issetMaxHealth {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MaxHealth is not set"))
	}
	if !issetCanHeal {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CanHeal is not set"))
	}
	if !issetMoveDelayFactor {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MoveDelayFactor is not set"))
	}
	if !issetDamageFactor {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DamageFactor is not set"))
	}
	if !issetAttackDelayFactor {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AttackDelayFactor is not set"))
	}
	if !issetRangeFactor {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RangeFactor is not set"))
	}
	if !issetAccuracyFactor {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AccuracyFactor is not set"))
	}
	if !issetSpawnDelayFactor {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SpawnDelayFactor is not set"))
	}
	return nil
}

func (p *BotType) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *BotType) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *BotType) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int64, 0, size)
	p.AttackTypeIDs = tSlice
	for i := 0; i < size; i++ {
		var _elem0 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem0 = v
		}
		p.AttackTypeIDs = append(p.AttackTypeIDs, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *BotType) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int64, 0, size)
	p.MoveTypeIDs = tSlice
	for i := 0; i < size; i++ {
		var _elem1 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem1 = v
		}
		p.MoveTypeIDs = append(p.MoveTypeIDs, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *BotType) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.CanSpawn = v
	}
	return nil
}

func (p *BotType) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.CanBeSpawned = v
	}
	return nil
}

func (p *BotType) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.SpawnDelay = v
	}
	return nil
}

func (p *BotType) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.MaxHealth = v
	}
	return nil
}

func (p *BotType) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.CanHeal = v
	}
	return nil
}

func (p *BotType) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.MoveDelayFactor = v
	}
	return nil
}

func (p *BotType) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.DamageFactor = v
	}
	return nil
}

func (p *BotType) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.AttackDelayFactor = v
	}
	return nil
}

func (p *BotType) readField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.RangeFactor = v
	}
	return nil
}

func (p *BotType) readField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.AccuracyFactor = v
	}
	return nil
}

func (p *BotType) readField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		p.SpawnDelayFactor = v
	}
	return nil
}

func (p *BotType) write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("BotType"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BotType) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ID: ", p), err)
	}
	return err
}

func (p *BotType) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err)
	}
	return err
}

func (p *BotType) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("attackTypeIDs", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:attackTypeIDs: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.AttackTypeIDs)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.AttackTypeIDs {
		if err := oprot.WriteI64(int64(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:attackTypeIDs: ", p), err)
	}
	return err
}

func (p *BotType) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("moveTypeIDs", thrift.LIST, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:moveTypeIDs: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.MoveTypeIDs)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.MoveTypeIDs {
		if err := oprot.WriteI64(int64(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:moveTypeIDs: ", p), err)
	}
	return err
}

func (p *BotType) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("canSpawn", thrift.BOOL, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:canSpawn: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.CanSpawn)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.canSpawn (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:canSpawn: ", p), err)
	}
	return err
}

func (p *BotType) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("canBeSpawned", thrift.BOOL, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:canBeSpawned: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.CanBeSpawned)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.canBeSpawned (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:canBeSpawned: ", p), err)
	}
	return err
}

func (p *BotType) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("spawnDelay", thrift.DOUBLE, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:spawnDelay: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.SpawnDelay)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.spawnDelay (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:spawnDelay: ", p), err)
	}
	return err
}

func (p *BotType) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("maxHealth", thrift.DOUBLE, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:maxHealth: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.MaxHealth)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.maxHealth (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:maxHealth: ", p), err)
	}
	return err
}

func (p *BotType) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("canHeal", thrift.BOOL, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:canHeal: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.CanHeal)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.canHeal (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:canHeal: ", p), err)
	}
	return err
}

func (p *BotType) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("moveDelayFactor", thrift.DOUBLE, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:moveDelayFactor: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.MoveDelayFactor)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.moveDelayFactor (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:moveDelayFactor: ", p), err)
	}
	return err
}

func (p *BotType) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("damageFactor", thrift.DOUBLE, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:damageFactor: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.DamageFactor)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.damageFactor (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:damageFactor: ", p), err)
	}
	return err
}

func (p *BotType) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("attackDelayFactor", thrift.DOUBLE, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:attackDelayFactor: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.AttackDelayFactor)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.attackDelayFactor (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:attackDelayFactor: ", p), err)
	}
	return err
}

func (p *BotType) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rangeFactor", thrift.DOUBLE, 13); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:rangeFactor: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.RangeFactor)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.rangeFactor (13) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 13:rangeFactor: ", p), err)
	}
	return err
}

func (p *BotType) writeField14(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("accuracyFactor", thrift.DOUBLE, 14); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:accuracyFactor: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.AccuracyFactor)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.accuracyFactor (14) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 14:accuracyFactor: ", p), err)
	}
	return err
}

func (p *BotType) writeField15(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("spawnDelayFactor", thrift.DOUBLE, 15); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:spawnDelayFactor: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.SpawnDelayFactor)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.spawnDelayFactor (15) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 15:spawnDelayFactor: ", p), err)
	}
	return err
}

func (p *BotType) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BotType(%+v)", *p)
}
